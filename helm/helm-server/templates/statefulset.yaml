apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "percona.fullname" . }}
  labels:
    app: {{ template "percona.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "percona.fullname" . }}
  serviceName: "{{ template "percona.fullname" . }}-cluster"
  template:
    metadata:
      labels:
        app: {{ template "percona.fullname" . }}
    spec:
      securityContext:
        fsGroup: 1001
      containers:
      - name: pxcnode
        image: "{{ .Values.imageRepo }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
   {{- if .Values.persistence.initdatadir }}
        - name: MYSQL_INIT_DATADIR
          value: "true"
    {{ end }}
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "percona.fullname" . }}
              key: root
        - name: XTRABACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "percona.fullname" . }}
              key: xtrabackup
        - name: MONITOR_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "percona.fullname" . }}
              key: monitor
        - name: CLUSTERCHECK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "percona.fullname" . }}
              key: clustercheck
        ports:
        - containerPort: 3306
          name: mysql
        - containerPort: 4444
          name: sst
        - containerPort: 4567
          name: replication
        - containerPort: 4568
          name: ist
        readinessProbe:
          exec:
            command:
            - /usr/bin/clustercheck.sh
          initialDelaySeconds: 15
          timeoutSeconds: 15
          periodSeconds: 30
          failureThreshold: 5
        livenessProbe:
          exec:
            command:
            - /usr/bin/clustercheck.sh
          initialDelaySeconds: 300
          timeoutSeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/mysql
        - name: config-volume
          mountPath: /etc/mysql/conf.d/
      {{- if .Values.pmm.enabled }}
      - name: pmmclient
        image: "perconalab/pmm-client"
        imagePullPolicy: Always
        ports:
        - containerPort: 42001
          name: query-data
        - containerPort: 42002
          name: mysql-metrics
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "percona.fullname" . }}
              key: root
        command: ["bash"]
        args:
          - "-c"
          - |
            set -x
            pmm-admin config --server {{ .Values.pmm.service }} --force
            pmm-admin add linux:metrics --force
       
            until pmm-admin add mysql:metrics --user root --password $MYSQL_ROOT_PASSWORD --host 127.0.0.1 --force;
            do
              echo "pmm-admin failed"
              sleep 1
            done
            pmm-admin add mysql:queries --user root --password $MYSQL_ROOT_PASSWORD --host 127.0.0.1 --force
            # keep the container alive but still responsive to stop requests
            trap : TERM INT; sleep infinity & wait
      {{- end }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "percona.fullname" . }}
          optional: true
      {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ {{ .Values.persistence.accessMode | quote }} ]
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      {{- else }}
      - name: datadir
        hostPath:
          path: "/mnt/disks/ssd0"
      {{- end }}
